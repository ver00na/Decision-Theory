import pandas as pd
import numpy as np

# Создаем DataFrame
df = pd.DataFrame({
    'Цена': [10.92, 11.65, 10.39, 10.8, 11.97, 10.37, 11.03, 11.99, 10.99, 10.79],
    'Диагональ': [6.52, 6.5, 6.53, 6.39, 6.5, 6.5, 6.5, 6.54, 6.3, 6.39],
    'Емкость аккумулятора': [5.0, 5.0, 5.0, 4.0, 5.02, 5.0, 5.0, 4.32, 5.0, 5.2],
    'Страхование': [1.5, 1, 1.5, 1, 2, 1.5, 2, 1, 1, 2],
    'Толщина': [9.0, 8.9, 8.4, 8.8, 8.9, 8.9, 9.1, 8.3, 9.0, 8.13]
})
df.index = ['A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10']
print(df)

# Инвертируем 'Толщина' и 'Цена'
df['Толщина'] = 1 / df['Толщина']
df['Цена'] = 1 / df['Цена']
print(df)

# Создаем массив для парного сравнения альтернатив
arr1 = np.zeros((10, 10), dtype="object")
for i in range(10):
    for j in range(i + 1, 10):
        arr = df.iloc[i].values >= df.iloc[j].values
        check = all(x == True for x in arr)
        arr2 = df.iloc[i].values <= df.iloc[j].values
        check2 = all(x == True for x in arr2)
        if check == True:
            arr1[j, i] = 'A' + str(i + 1)
        elif check2 == True:
            arr1[j, i] = 'A' + str(j + 1)
        else:
            arr1[j, i] = 'н'

# Создаем DataFrame для парного сравнения
df_ = pd.DataFrame(arr1, columns=['A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10'])
df_.index = ['A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10']

print("\nТаблица Попарное сравнение альтернатив:")
print(df_)
print(df.iloc[[0, 2, 5, 9]])

# Инвертируем 'Толщина' и 'Цена' обратно для следующих вычислений
df['Толщина'] = 1 / df['Толщина']
df['Цена'] = 1 / df['Цена']

# Отбор по верхней/нижней границе
print("\nРезультат указания верхней/нижней границы: ('Цена' <= 12, 'Диагонал' >= 6.52)")
print(df[(df['Цена'] <= 12) & (df['Диагональ'] >= 6.52)])

# Отбор по заданным критериям
print("\nРезультат отбора вариантов, удовлетворяющих заданным критериям: (главный критерий: цена, Толщина <= 8.9, Страхование >= 1.5)")
print(df[(df['Толщина'] <= 8.9) & (df['Страхование'] >= 1.5)])

# Лексикографическая оптимизация
print("\nРезультат лексикографической оптимизации: (Самая важная: Цена)")
print(df.sort_values(['Цена', 'Страхование', 'Емкость аккумулятора', 'Диагональ', 'Толщина']).head(1))
